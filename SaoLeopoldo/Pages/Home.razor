@page "/"
@using System.Text.Json
@inject HttpClient _HttpClient

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<BlazorBarcodeScanner.ZXing.JS.BarcodeReader
    Title=""
    StartCameraAutomatically="true"
    ShowStart="false"
    ShowReset="false"
    ShowResult="true"
    ShowStop="false"
    ShowToggleTorch="false"
    ShowVideoDeviceList="false"
    VideoWidth="300"
    VideoHeight="200"
    OnBarcodeReceived="LocalReceivedBarcodeText"/>

@if (!Products.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Código de barras</th>
            <th>Nome</th>
            <th>Quantidade</th>
            <th>#</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in Products)
        {
            <tr>
                <td>@product.Barcode</td>
                <td>@product.Name</td>
                <td>@product.Quantity</td>
                <td></td>
            </tr>
        }
        </tbody>
    </table>
}

@code{

    private string LocalBarcodeText;
    private List<Product> Products = [];

    private async void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        var barCode = args.BarcodeText;
        var nameProduct = await GetNameProduct(barCode);

        var product = Products.Find(x => x.Barcode == barCode);

        if (product is null)
        {
            product = AddProduct(barCode, nameProduct);
            Products.Add(product);
        }
        else
        {
            product.Quantity++;
        }

        StateHasChanged();
    }

    private static Product AddProduct(string barCode, string? nameProduct)
    {
        return new Product(barCode, nameProduct);
    }

    private async Task<string?> GetNameProduct(string barcode)
    {
        var response = await _HttpClient.GetAsync($"https://compras.menorpreco.pr.gov.br/api/v1/compras/buscaitem/{barcode}");

        if (!response.IsSuccessStatusCode)
        {
            return null;
        }

        var json = await response?.Content?.ReadAsStringAsync()!;

        var objBase = JsonSerializer.Deserialize<RootObject>(json, new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        
        var obj = objBase.produtos.FirstOrDefault();

        var name = obj?.desc_ccg ?? obj?.nfe.FirstOrDefault()?.descricao;

        return name;
    }

    public record RootObject(
        Produtos[] produtos
    );

    public record Produtos(
        string gtin,
        string desc_ccg,
        Nfe[] nfe
    );

    public record Nfe(
        string descricao
    );

    public class Product
    {
        public Product(string barcode, string name)
        {
            Barcode = barcode;
            Name = name;
            Quantity = 1;
        }

        public string Barcode { get; set; }
        public string Name { get; set; }
        public int Quantity { get; set; }
    }

}